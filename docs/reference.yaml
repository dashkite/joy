- name: Function
  functions:

  - name: identity
    arguments: value
    returns: value
    description: Returns its argument.

  - name: wrap
    arguments: value
    returns: function
    description: Returns a function that returns its argument.

  - name: unary
    arguments: function
    returns: function
    description: >-
      Returns a unary function that passes its argument to the given function.

  - name: binary
    arguments: function
    returns: function
    description: >-
      Returns a binary function that passes its arguments to the given function.

  - name: ternary
    arguments: function
    returns: function
    description: >-
      Returns a ternary function that passes its arguments to the given function.

  - name: arity
    arguments: n, function
    returns: function
    description: >-
      Returns an n-ary function that passes its arguments to the given function.

  - name: curry
    arguments: function
    returns: function
    description: >-
      Returns a curryable function that passes its arguments to the given function.

  - name: substitute
    arguments: pattern, values
    returns: array
    description: >-
      Given a pattern array and an array of values, returns an array with the values substited for the special value \_ in the pattern array.

  - name: partial
    arguments: function, pattern
    returns: function
    description: >-
      Returns a function that substitutes arguments using the given pattern array before passing them to the given function.

  - name: flip
    arguments: function
    returns: function
    description: >-
      Returns a function that reverses its arguments before passing them to the given function.

  - name: tee
    arguments: function
    returns: function
    description: >-
      Returns a function that calls the given function but always returns its first argument.

  - name: rtee
    arguments: function
    returns: function
    description: >-
      Returns a function that calls the given function but always returns its last argument.

  - name: wait
    arguments: function
    returns: function
    description: >-
      Returns a function that awaits on its arguments before passing it to the given function.

  - name: pipe
    arguments: functions
    returns: function
    description: >-
      Returns a function that composes the given functions, calling them in the order given.

  - name: pipeWith
    arguments: adapter, functions
    returns: function
    description: >-
      Works like [`pipe`](#pipe), except transforms each function with the given adaper before composing them.
    example: |-
      trace = (f) ->
        (args...) ->
          console.log "function:", f.name
          console.log "-- arguments:", args
          console.log "-- returns:", r = f args...
          r

      pipeWith trace, [
        # functions to trace...
      ]

  - name: compose
    arguments: functions
    returns: function
    description: >-
      Returns a function that composes the given functions, calling them in reverse of the order given.

  - name: flow
    arguments: functions
    returns: function
    description: >-
      Returns an async function that composes the given functions, which may be async, calling them in the order given.

      Convenience for `pipeWith wait`.

  - name: flowWith
    arguments: adapter, functions
    returns: function
    description: >-
      Works like [`flow`](#flow), except transforms each function with the given adaper before composing them.

  - name: apply
    arguments: function, arguments
    returns: value
    description: >-
      Calls the given function with the given arguments. Use with [`bind`](#bind) to bind `this`.
    wraps: Function::apply
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply

  - name: send
    arguments: name, arguments, object
    returns: value
    description: >-
      Invokes the named method on _object_ with _arguments_.

  - name: spread
    arguments: function
    returns: function
    description: >-
      Returns a function that accepts an array of arguments and passes them to the given function.

  - name: stack
    arguments: function
    returns: function
    description: >-
      Returns a function that passes its arguments to the given function as an array.

  - name: once
    arguments: function
    returns: function
    description: >-
      Returns a function that calls the given function once. Subsequent invocations will simply return the value returned by the initial invocation.

  - name: memoize
    arguments: function
    returns: function
    description: >-
      Returns a function that calls the given function once for a given set arguments. Subsequent invocations with the same arguments will simply return the value returned by the initial invocation. The arguments must be serializable with `toString`.

- name: Generic
  functions:

  - name: generic (create)
    arguments: name, description | description
    returns: function
    description: >-
      Generic function wrapper around [`Generic.create`](#Generic.create).
    example: |-
      fib = generic
        name: "fib"
        description: "Fibonacci sequence"
      generic fib, (gte 1), (n) -> (fib n - 1) + (fib n - 2)
      generic fib, (eq 1), -> 1
      generic fib, (eq 2), -> 1

  - name: generic (define)
    arguments: function, arguments...
    returns: GenericFunction
    description: >-
      Generic function wrapper around [`Generic.define`](#Generic.define).

  - name: Generic.create
    arguments: name, description | description
    returns: function
    description: >-
      Creates a generic function. Returns a function whose `_` property references te corresponding `GenericFunction` instance.

  - name: Generic.define
    arguments: function, terms..., implementation
    returns: GenericFunction
    description: >-
      Defines a specialization for given generic function using the given _terms_ and _implementation_ function. Returns the corresponding `GenericFunction` instance.

  - name: Generic.lookup
    arguments: function, arguments...
    returns: function
    description: >-
      Returns the implementation that matches the given _arguments_, if any.

- name: Predicate
  functions:

  - name: negate
    arguments: function
    returns: function
    description: >-
      Returns a function that returns the negation of the given function.

  - name: any
    arguments: functions
    returns: function
    description: >-
      Returns a function that returns true if any of the given _functions_, attempted in the order given, returns true, and false otherwise.

  - name: all
    arguments: functions
    returns: function
    description: >-
      Returns a function that returns true if all of the given _functions_, attempted in the order given, return true, and false otherwise.

  - name: test
    arguments: predicate, consequent[, alternative]
    returns: function
    description: >-
      Returns a function that calls the _consequent_ if the _predicate_ returns true, and the (optional) _alternative_ otherwise.

  - name: branch
    arguments: conditions
    returns: function
    description: >-
      Returns a function evaluates a list of _conditions_ (and associative array consisting of pairs of predicates and consequents), in the order given, until one of the predicates matches. Calls the corresponding consquent if a match is found.

  - name: attempt
    arguments: function
    returns: function
    description: >-
      Returns a function that calls the given function, returning false if the function throws an exception or returns a rejected promise, and true otherwise.

- name: Object
  functions:

  - name: keys
    arguments: object
    returns: array
    description: Returns the property names for the given object.

  - name: values
    arguments: object
    returns: array
    description: Returns the property values for the given object.

  - name: pairs
    arguments: object
    returns: array
    description: >-
      Returns the properties for the given object as an associative array (an array of two-element arrays).
    example: |-
      assert.deepEqual (x.pairs {a: 1, b: 2, c: 3}),
        [["a", 1], ["b", 2], ["c", 3]]

  - name: has
    arguments: key, object
    returns: boolean
    description: >-
      Returns the true if the given object has a property matching the given key, false otherwise.

  - name: get
    arguments: key, object
    returns: boolean
    description: >-
      Returns the value of the property matching the given key for the given object. Like most Joy functions, `get` is curryable, so `get` can be used like Ramda's [`pluck`][ramda].

      [ramda]: https://ramdajs.com/docs/#pluck

  - name: set
    arguments: key, value, object
    returns: boolean
    description: >-
      Sets the value of the property matching the given key for the given object.

  - name: assign
    arguments: object, objects...
    returns: object
    description: >-
      Adds the properties for _objects_ to _object_. Modifies _object_. If you want to create a new object, use [`merge`](#merge).

  - name: merge
    arguments: object, objects...
    returns: object
    description: >-
      Adds the properties for _objects_ to _object_. Modifies _object_. If you want to create a new object, use [`merge`](#merge).

  - name: query
    arguments: exemplar, object
    returns: object
    description: >-
      Returns true if _object_ matches _exemplar_, false otherwise. An exemplar matches if all of its properties are equal to the corresponding properties in the target object. Matching is done recursively, so the exemplar can contain nested values.
    example: |-
      assert.equal true, x.query { x: {y: 2 }}, { x: { y: 2}}
      assert.equal false, x.query { x: {y: 2 }}, { x: { y: 1}}

- name: Metaclass
  functions:

  - name: property
    arguments: key, description, target
    returns: object
    description: >-
      Defines a property on _target_ using the given _key_ (the property name) and _description_. Like most Joy functions, `property` is curryable, so you can define a function that will define a property on any object. Use in combination with [`mixin`](#mixin) to create reusable mixins.
    wraps: Object.defineProperty
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty

  - name: properties
    arguments: dictionary, target
    returns: object
    description: >-
      Defines properties on _target_ using the given _dictionary_ of keys and property names. Convenience wrapper for [`property`](#property). Like most Joy functions, `properties` is curryable, so you can define a function that will define a property on any object. Use in combination with [`mixin`](#mixin) to create reusable mixins.

  - name: getter
    arguments: key, function, target
    returns: object
    description: >-
      Defines a getter on _target_ using the given _key_ (the property name) and _description_. Like most Joy functions, `getter` is curryable, so you can define a function that will define a property on any object. Use in combination with [`mixin`](#mixin) to create reusable mixins.
    wraps: Object.defineProperty
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty

  - name: getters
    arguments: dictionary, target
    returns: object
    description: >-
      Defines getters on _target_ using the given _dictionary_ of keys and getter functions. Convenience wrapper for [`getter`](#getter). Like most Joy functions, `getters` is curryable, so you can define a function that will define a property on any object. Use in combination with [`mixin`](#mixin) to create reusable mixins.

    example: |-
      class Foo
        mixin @::, [
          getters
            bar: -> "bar"
        ]
      assert.equal "bar", (new Foo).bar

  - name: setter
    arguments: key, function, target
    returns: object
    description: >-
      Defines a setter on _target_ using the given _key_ (the property name) and _description_. Like most Joy functions, `setter` is curryable, so you can define a function that will define a property on any object. Use in combination with [`mixin`](#mixin) to create reusable mixins.
    wraps: Object.defineProperty
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty

  - name: setters
    arguments: dictionary, target
    returns: object
    description: >-
      Defines setters on _target_ using the given _dictionary_ of keys and setter functions. Convenience wrapper for [`setter`](#setter). Like most Joy functions, `setters` is curryable, so you can define a function that will define a property on any object. Use in combination with [`mixin`](#mixin) to create reusable mixins.

  - name: method
    arguments: key, function, target
    returns: object
    description: >-
      Defines a method on _target_ using the given _key_ (the property name) and _description_. Like most Joy functions, `method` is curryable, so you can define a function that will define a property on any object. Use in combination with [`mixin`](#mixin) to create reusable mixins.

  - name: methods
    arguments: dictionary, target
    returns: object
    description: >-
      Defines methods on _target_ using the given _dictionary_ of keys and methods. Convenience wrapper for [`method`](#method). Like most Joy functions, `methods` is curryable, so you can define a function that will define a property on any object. Use in combination with [`mixin`](#mixin) to create reusable mixins.

  - name: mixin
    arguments: target, functions
    returns: object
    description: >-
      Applies each function to the given target. See [`getters`](#getters) for an example of how to use it with object modifiers like `getters` or `methods` to create reusable mixins.

- name: Type
  functions:

  - name: prototype
    arguments: value
    returns: prototype
    description: >-
      Returns the prototype of the given _value_.

  - name: isPrototype
    arguments: prototype, value
    returns: boolean
    description: >-
      Returns true if _prototype_ is the prototype for _value_, false otherwise.

  - name: isTransitivePrototype
    arguments: prototype, value
    returns: boolean
    description: >-
      Returns true if _prototype_ is a transitive prototype of _value_, false otherwise.

  - name: isType
    arguments: type, value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of _type_, false otherwise.

  - name: isKind
    arguments: type, value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of _type_ or one of its descendents (as defined by the prototype chain for _value_), false otherwise.

  - name: areType
    arguments: type, values
    returns: boolean
    description: >-
      Returns true if each element in an array of _values_ is an instance of _type_, false otherwise.

  - name: areKind
    arguments: type, values
    returns: boolean
    description: >-
      Returns true if each element of in an array of _values_ is an instance of _type_ or one of its descendents (as defined by the prototype chain for _value_), false otherwise.

  - name: Type.define
    arguments: parent
    returns: class
    description: >-
      Creates a new type (class) that extends _parent_, if defined, or `Object` otherwise. Convenience wrapper for `class`.

  - name: Type.create
    arguments: type
    returns: instance
    description: >-
      Creates a new instance of a type (class). Convenience wrapper for `new`.

  - name: instanceOf
    arguments: type, instance
    returns: boolean
    description: >-
      Returns true if `instanceof` returns true for the given instance and type, false otherwise. Convenience wrapper for `instanceof`. However, [`isKind`](#iskind) is less likely to throw.

  - name: isDefined
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is defined, false otherwise.

  - name: isUndefined
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is undefined, false otherwise.

  - name: isBoolean
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of `Boolean`.

  - name: isString
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of `String`.

  - name: isSymbol
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of `Symbol`.

  - name: isNumber
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of `Number`.

  - name: isNaN
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is not a number. Equivalent to `Number.isNaN`.

  - name: isFinite
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is fine. Equivalent to `Number.isFinite`.

  - name: isInteger
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is fine. Equivalent to `Number.isInteger`.

  - name: isDate
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of `Date`.

  - name: isError
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of `Error`.

  - name: isRegExp
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of `RegExp`.

  - name: isPromise
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of `Promise`.

  - name: isObject
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of `Object`.

  - name: isArray
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of `Array`. Equivalent to `Array.isArray`.

  - name: isBuffer
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of `Buffer`.

  - name: isArrayBuffer
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of `ArrayBuffer`.

  - name: isDataView
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of `DataView`.

  - name: isTypedArray
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of `Uint8Array`.

  - name: isMap
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of `Map`.

  - name: isWeakMap
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of `WeakMap`.

  - name: isSet
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of `Set`.

  - name: isRegularFunction
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is an instance of `Function`.

  - name: isGeneratorFunction
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is a generator function.

  - name: isAsyncFunction
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is an asynchronous function.

  - name: isFunction
    arguments: value
    returns: boolean
    description: >-
      Returns true if _value_ is a function.

- name: Value
  functions:

  - name: equal
    arguments: a, b
    returns: boolean
    description: >-
      Returns true if the given values are equal, false otherwise. Performs a deep comparison.

  - name: clone
    arguments: value
    returns: value
    description: >-
      Returns a deep clone of the given value.

  - name: size
    arguments: value
    returns: integer
    description: >-
      Returns the size of _value_, if possible. A value is considered to have a size is it has a `length`, `size`, or `byteLength` property, or if it is an object, in which case we use the length of the array returned by [`Object.keys`][Object.keys].
    links:
      Object.keys: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys

  - name: isEmpty
    arguments: value
    returns: boolean
    description: >-
      Returns true if the size of _value_ is zero, false otherwise.


- name: Promise
  functions:

  - name: promise
    arguments: function
    returns: promise
    description: >-
      Creates a promise.
    _wraps: '`Promise` constructor'
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise

  - name: resolve
    arguments: value
    returns: promise
    description: >-
      Returns a promise that resolve to _value_.
    wraps: Promise.resolve
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve

  - name: reject
    arguments: error
    returns: promise
    description: >-
      Returns a promise that rejects with _error_.
    wraps: Promise.reject
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject

  - name: all
    arguments: iterable
    returns: promise
    description: >-
      Returns a promise that resolve to an array of the values of of the resolved promises. Rejects if any of the promises are rejected.
    wraps: Promise.all
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all

  - name: any
    arguments: iterable
    returns: promise
    description: >-
      Returns a promise that resolves to the values of the first resolved promise of the _iterable_. If none of the promises resolve, the promise rejects.
    wraps: Promise.any
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race

  - name: race
    arguments: iterable
    returns: promise
    description: >-
      Returns a promise that resolves or rejects as soon as one of the promises in an iterable resolves or rejects, with the value or reason from that promise.
    wraps: Promise.race
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race

  - name: map
    arguments: iterable
    returns: promise
    description: >-
      Returns a promise that resolves after all of the given promises have either resolved or rejected, with an array of objects that each describes the outcome of each promise. Effectively maps an iterable of promises to an array of results.

      For each outcome object, a status string is present. If the status is fulfilled, then a value is present. If the status is rejected, then a reason is present. The value (or reason) reflects what value each promise was fulfilled (or rejected) with.
    wraps: Promise.allSettled
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled

- name: Text
  functions:

  - name: toString
    arguments: value
    returns: string
    description: >-
      Returns a string representation of _value_.
    wraps: Object::toString
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString

  - name: toUpperCase
    arguments: string
    returns: string
    description: >-
      Returns a the given string in upper case.
    wraps: String::toUpperCase
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase

  - name: toLowerCase
    arguments: string
    returns: string
    description: >-
      Returns a the given string in lower case.
    wraps: String::toLowerCase
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase

  - name: trim
    arguments: string
    returns: string
    description: >-
      Returns a the given string with leading and trailing whitespace removed.
    wraps: String::trim
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim

  - name: split
    arguments: pattern, string
    returns: array
    description: >-
      Returns an array obtained by splitting _string_ using the given Regular Expression _pattern_.
    wraps: String::split
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split

  - name: w
    arguments: string
    returns: array
    description: >-
      Returns an array obtained by splitting _string_ on whitespace.

  - name: isBlank
    arguments: string
    returns: boolean
    description: >-
      Returns true if the string is empty, false otherwise.

  - name: match
    arguments: pattern, string
    returns: match
    description: >-
      Returns the [match data][] for the given Regular Expression _pattern_ or undefined if the pattern doesn't match.
    wraps: String::match
    links:
      match data: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match#return_value
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match

  - name: isMatch
    arguments: pattern, string
    returns: boolean
    description: >-
      Returns true if the given Regular Expression _pattern_ matches, false otherwise.
    wrapper:
      for: RegExp::test
      link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test

  - name: replace
    arguments: pattern, replacement, string
    returns: string
    description: >-
      Returns the string resulting from replacing matches of the Regular Expression _pattern_ using _replacement_, which may be a string or function returning a string.
    wrapper:
      for: String::replace
      link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace

  - name: template
    arguments: string[, filters]
    returns: function
    description: >-
      Returns a function that will substitute the properties of its argument
      into the given string, processing it using the optional filters.

      Lightweight but relatively limited and slow. Uses regexp substitution and does not support common templating features, such as control flow, iteration, or escaping.

    example: |-
      f = template "foo {{ bar | reverse }} baz",
        reverse: (s) -> s.split("").reverse().join("")
      assert.equal "foo xuaf baz", f bar: "faux"



- name: Array
  functions:

  - name: first
    arguments: array
    returns: value
    description: >-
      Returns the first element of _array_.

  - name: second
    arguments: array
    returns: value
    description: >-
      Returns the second element of _array_.

  - name: third
    arguments: array
    returns: value
    description: >-
      Returns the third element of _array_.

  - name: fourth
    arguments: array
    returns: value
    description: >-
      Returns the fourth element of _array_.

  - name: fifth
    arguments: array
    returns: value
    description: >-
      Returns the fifth element of _array_.

  - name: nth
    arguments: n, array
    returns: value
    description: >-
      Returns the _nth_ element of _array_.

  - name: last
    arguments: array
    returns: value
    description: >-
      Returns the last element of _array_.

  - name: rest
    arguments: array
    returns: array
    description: >-
      Returns a new array consisting of all but the first element of the given array.

  - name: slice
    arguments: start, end, array
    returns: array
    description: >-
      Returns an array containing the elements in _array_ from _start_ up to, but not including, _end_.
    wraps: Array::slice
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice

  - name: push/enqueue
    arguments: array, value
    returns: array
    description: >-
      Adds _value_ to the end of _array_ and returns the mutated array.
    wraps: Array::push
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push

  - name: pop/dequeue
    arguments: array
    returns: value
    description: >-
      Removes _value_ from the end of _array_ and returns it, mutating the array.
    wraps: Array::pop
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop

  - name: shift
    arguments: array, value
    returns: array
    description: >-
      Removes _value_ from the start of the _array_ and returns it, mutating the array.
    wraps: Array::shift
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift

  - name: unshift
    arguments: array, value
    returns: array
    description: >-
      Adds _value_ to the start of the _array_ and returns the mutated array.
    wraps: Array::unshift
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift

  - name: cat
    arguments: array, array, ...
    returns: array
    description: >-
      Concatenates arrays passed as arguments, returning a new array.
    wraps: Array::concat
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat

  - name: splice
    arguments: start, end, array
    returns: array
    description: >-
      Removes the elements in _array_ from _start_ up to, but not including, _end_, and returns the mutated array.
    wraps: Array::splice
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice

  - name: insert
    arguments: index, value, array
    returns: array
    description: >-
      Inserts _value_ into array at _index_, returning the mutated array.

  - name: remove
    arguments: value, array
    returns: array
    description: >-
      Removes _value_ from array, if it exists within it, returning the mutated array.

  - name: range
    arguments: start, finish
    returns: array
    description: >-
      Returns a numeric array with consecutive values from _start_ to _finish_.

  - name: join
    arguments: text, array
    returns: string
    description: >-
      Returns a string formed by concatening consecutive elements of _array_ with _text_.
    wraps: Array::join
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join

  - name: fill
    arguments: value, array
    returns: array
    description: >-
      Sets each element of _array_ to _value_ and returns the mutated array.
    wraps: Array::fill
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill

  - name: sort
    arguments: comparator, array
    returns: array
    description: >-
      Sorts the given array in place using the _comparator_ function. Returns the sorted (mutated) array.
    wraps: Array::sort
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort

  - name: pluck
    arguments: array
    returns: value
    description: >-
      Returns a random element from _array_.

  - name: pair
    arguments: value, value
    returns: array
    description:
      Returns its arguments as an array.

  - name: shuffle
    arguments: array
    returns: array
    description: >-
      Randomly shuffles the elements of the array.

- name: Set
  functions:

  - name: union
    arguments: iterable, iterable
    returns: set
    description: >-
      Returns a set that is the union of the given iterables.

  - name: intersection
    arguments: iterable, iterable
    returns: set
    description: >-
      Returns a set that is the intersection (the common elements) of the given iterables.

  - name: complement
    arguments: iterable, iterable
    returns: set
    description: >-
      Returns a set that is the complement (values that are only produced by one iterable) of the given iterables.

  - name: difference
    arguments: iterable, iterable
    returns: set
    description: >-
      Returns a set that is consists of the elements of the first iterable after removing the elements of the second.

  - name: unique
    arguments: iterable
    returns: set
    description: >-
      Returns a set that is consists only of the unique elements of _iterable_.

  - name: dupes
    arguments: iterable
    returns: set
    description: >-
      Returns a set that is consists only of the non-unique elements of _iterable_.

- name: Iterable
  functions:

  # TODO maybe document this as separate variants?
  - name: includes
    arguments: value, iterable
    returns: boolean
    description: >-
      Returns true if _value_ is produced by _iterable_, false otherwise. Specialized for array.
    wraps: Array::includes
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes

  - name: uniqueBy
    arguments: comparator, iterable
    returns: array
    description: >-
      Returns an array of the unique values of _iterable_ as determined by the _comparator_ function.

- name: Math
  functions:

  - name: gt
    arguments: x, y
    returns: boolean
    description: >-
      Returns true if x > y, false otherwise.

  - name: lt
    arguments: x, y
    returns: boolean
    description: >-
      Returns true if x < y, false otherwise.

  - name: gte
    arguments: x, y
    returns: boolean
    description: >-
      Returns true if x >= y, false otherwise.

  - name: lte
    arguments: x, y
    returns: boolean
    description: >-
      Returns true if x <= y, false otherwise.

  - name: add
    arguments: x, y
    returns: number
    description: Returns x + y.

  - name: sub
    arguments: x, y
    returns: number
    description: Returns x - y.

  - name: mul
    arguments: x, y
    returns: number
    description: Returns x * y.

  - name: div
    arguments: x, y
    returns: number
    description: Returns x / y.

  - name: mod
    arguments: x, y
    returns: number
    description: Returns x % y.

  - name: isModulo
    arguments: x, y
    returns: boolean
    description: >-
      Returns true if y % x is zero, false otherwise.

  - name: even
    arguments: x
    returns: boolean
    description: >-
      Returns true if x % 2 is zero, false otherwise.

  - name: odd
    arguments: x
    returns: boolean
    description: >-
      Returns true if x % 2 is non-zero, false otherwise.

  - name: min
    arguments: array
    returns: number
    description: >-
      Returns the minimum number in _array_.

  - name: max
    arguments: array
    returns: number
    description: >-
      Returns the maximum number in _array_.

  - name: abs
    arguments: x
    returns: number
    description: >-
      Returns the absolute value of _x_.

  - name: pow
    arguments: x, y
    returns: number
    description: >-
      Returns the x to the power of y. The arguments may be BigInt instances.

- name: Time
  functions:

  - name: timer
    arguments: interval, action
    returns: cancel
    description: >-
      Calls _action_ function after the _interval_ (in milliseconds) has expired. Returns a function to cancel the timer.
    wraps: setTimeout
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout

  - name: sleep
    arguments: interval
    returns: promise
    description: >-
      Returns a promise that resolves after the _interval_ (in milliseconds) has expired.
    wraps: setTimeout
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout

  - name: milliseconds
    arguments: ()
    returns: number
    description: >-
      Returns the current time in milliseconds, with precision to microseconds if available.
    wraps: Performance::now
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/API/Performance/now

  - name: benchmark
    arguments: function
    returns: number
    description: >-
      Runs _function_ returning the elapsed time in milliseconds, with precision to microseconds if available. If _function_ returns a promise, returns a promise that resolves to the elapsed time.
    wraps: Performance::now
    links:
      wraps: https://developer.mozilla.org/en-US/docs/Web/API/Performance/now
