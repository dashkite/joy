title: wrap
name: wrap
type: function
summary: Returns a function that returns its argument.
signatures:
  - arguments:
      - name: value
        description: Any JavaScript value.
    returns:
      name: function
      type: Function
      description: An anonymous function that returns `value` when invoked.

description: |
  `wrap` returns an anonymous function that, when invoked, returns the argument `value`. Use it any time you need to convert a value into a function you want to invoke later.

  !!! Warning Caution
  The argument `value` remains in scope between invocations. If you use `wrap` on a `value` where JavaScript applies [pass by reference][], mutations to `value` persist. That is, the _new_ value is returned the next time you invoke `wrap`. That's probably not a good idea, so be careful.
  !!!

example:
  sections:
    - title: Returns a function that returns its argument.
      code:
        CoffeeScript: |-
          provide = _.wrap 1

          assert.equal 1,
            provide()
        JavaScript: |-
          let provide = _.wrap(1);

          assert.equal(1,
            provide());

    - title: Avoid mutating wrapped values.
      code:
        CoffeeScript: |-
          provide = _.wrap x: 1
          double = (object) ->
            object.x *= 2
            object

          assert.deepEqual x: 2,
            double provide()

          # With `value` mutated, provide returns the doubled value.
          assert.deepEqual x: 2,
            provide()
        JavaScript: |-
          let provide = _.wrap({ x: 1 });
          let double = (object) => {
            object.x *= 2
            return object
          };

          assert.deepEqual({ x: 2 },
            double(provide()));

          assert.deepEqual({ x: 2 },
            provide());

      description: |
        The above example defines:
          - `provide`, a function created by `wrap` that returns an object.
          - `double`, a function that mutates the object passed to it.

        In the first assert, we can see that `double` successfully doubles the value returned from `provide`. However, because JavaScript applies [pass by reference][] to regular objects, the value now returned by `provide` is also altered. We confirm that in the second assert.

        Keep this in mind when using `wrap` and avoid mutating `value`.
